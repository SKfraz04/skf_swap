import React from 'react';
import { BlockchainToken, QuoteOption, WalletAccount, GasFeeOption, GasEstimate, SwapValidationErrorType, NetworkInfo, RefreshBlockchainStateParams } from '../constants/types';
import Amount from '../utils/amount';
export declare const useSwap: () => {
    fromToken: BlockchainToken | undefined;
    toToken: BlockchainToken | undefined;
    fromAmount: string;
    toAmount: string;
    fromAssetBalance: Amount;
    fiatValue: string | undefined;
    isFetchingQuote: boolean;
    quoteOptions: QuoteOption[];
    selectedQuoteOptionIndex: number;
    selectingFromOrTo: "from" | "to" | undefined;
    swapAndSendSelected: boolean;
    selectedSwapAndSendOption: string;
    selectedSwapSendAccount: WalletAccount | undefined;
    toAnotherAddress: string;
    userConfirmedAddress: boolean;
    selectedGasFeeOption: GasFeeOption;
    slippageTolerance: string;
    useDirectRoute: boolean;
    gasEstimates: GasEstimate;
    onSelectFromToken: (token: BlockchainToken) => Promise<void>;
    onSelectToToken: (token: BlockchainToken) => Promise<void>;
    getCachedAssetBalance: (token: BlockchainToken) => Amount;
    onSelectQuoteOption: (index: number) => void;
    setSelectingFromOrTo: React.Dispatch<React.SetStateAction<"from" | "to" | undefined>>;
    handleOnSetFromAmount: (value: string) => Promise<void>;
    handleOnSetToAmount: (value: string) => Promise<void>;
    onClickFlipSwapTokens: () => Promise<void>;
    setSwapAndSendSelected: React.Dispatch<React.SetStateAction<boolean>>;
    handleOnSetToAnotherAddress: (value: string) => void;
    onCheckUserConfirmedAddress: (id: string, checked: boolean) => void;
    onSetSelectedSwapAndSendOption: (value: string) => void;
    setSelectedSwapSendAccount: React.Dispatch<React.SetStateAction<WalletAccount | undefined>>;
    setSelectedGasFeeOption: React.Dispatch<React.SetStateAction<GasFeeOption>>;
    setSlippageTolerance: React.Dispatch<React.SetStateAction<string>>;
    setUseDirectRoute: React.Dispatch<React.SetStateAction<boolean>>;
    onSubmit: () => Promise<void>;
    submitButtonText: string;
    isSubmitButtonDisabled: boolean | undefined;
    swapValidationError: SwapValidationErrorType | undefined;
    refreshBlockchainState: (overrides: Partial<RefreshBlockchainStateParams>) => Promise<void>;
    getNetworkAssetsList: (networkInfo: NetworkInfo) => BlockchainToken[];
};
export default useSwap;
